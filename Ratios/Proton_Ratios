// src/Carbon_Comparison.java
import org.jlab.groot.ui.TCanvas;
import org.jlab.groot.data.*;
import org.jlab.clas.physics.*;
import org.jlab.jnp.hipo4.io.*;
import org.jlab.jnp.hipo4.data.*;

public class Proton_Counts {
    public static void main(String[] args) {
        long st = System.currentTimeMillis(); // Start time for performance measurement

        // --- Set up HipoChain reader for Carbon files ---
        HipoChain reader = Carbon_F.getCarbonChain();

        // --- Event and particle banks ---
        Event event = new Event();
        Bank particles = new Bank(reader.getSchemaFactory().getSchema("REC::Particle"));

        // --- Histograms for Carbon and Deuterium ---
        H1F hZ_C = new H1F("hZ_C", 100, 0, 2);
        H1F hZ_D = new H1F("hZ_D", 100, 0, 2);
        H1F hQ2_C = new H1F("hQ2_C", 50, 0, 10);
        H1F hQ2_D = new H1F("hQ2_D", 50, 0, 10);
        H1F hNu_C = new H1F("hNu_C", 50, 0, 10);
        H1F hNu_D = new H1F("hNu_D", 50, 0, 10);
        H1F hPt2_C = new H1F("hPt2_C", 50, 0, 2);
        H1F hPt2_D = new H1F("hPt2_D", 50, 0, 2);

        // --- Lorentz vectors for beam and electron ---
        LorentzVector vBeam = new LorentzVector(0.0, 0.0, 10.5473, 10.5473);
        LorentzVector electron = new LorentzVector();
        int protonCount_C = 0;
        int protonCount_D = 0;
        // --- Event loop: process all events in the Carbon chain ---
        while (reader.hasNext()) {
            reader.nextEvent(event);
            event.read(particles);
            // --- Find the first electron in the event ---
            int electronIndex = -1;
            for (int i = 0; i < particles.getRows(); i++) {
                if (particles.getInt("pid", i) == 11) {
                    electronIndex = i;
                    break;
                }
            }
            if (electronIndex == -1) continue;
            // --- Electron kinematics ---
            float e_px = particles.getFloat("px", electronIndex);
            float e_py = particles.getFloat("py", electronIndex);
            float e_pz = particles.getFloat("pz", electronIndex);
            electron.setPxPyPzM(e_px, e_py, e_pz, 0.000511);
            // --- Calculate Q2, nu, W, y ---
            LorentzVector vVirtualPhoton = new LorentzVector();
            vVirtualPhoton.copy(vBeam);
            vVirtualPhoton.sub(electron);
            double Q2 = -vVirtualPhoton.mass2();
            double nu = vBeam.e() - electron.e();
            double W2 = 0.938 * 0.938 + 2 * 0.938 * nu - Q2;
            double W = Math.sqrt(W2);
            double y = nu / vBeam.e();
            // --- Check if W, Q2, and y are within valid ranges ---
            if (Q2 <= 1.0 || W <= 2.0 || y >= 0.85) continue;
            // --- Fill histograms based on target ---
            for (int i = 0; i < particles.getRows(); i++) {
                if (particles.getInt("pid", i) == 2212) {
                    float p_px = particles.getFloat("px", i);
                    float p_py = particles.getFloat("py", i);
                    float p_pz = particles.getFloat("pz", i);
                    float p_vz = particles.getFloat("vz", i);
                    double p = Math.sqrt(p_px * p_px + p_py * p_py + p_pz * p_pz);
                    double Ep = Math.sqrt(p * p + 0.938 * 0.938);
                    double z = (Ep + p_pz) / (0.938 + 2 * nu);
                    double pt2 = p_px * p_px + p_py * p_py;

                    // --- Apply cuts before filling histograms ---
                    if (nu >= 2.0) { // Only fill Nu histograms for nu >= 2 GeV
                        if (p_vz > -8 && p_vz < -2) {
                            hNu_D.fill(nu);
                        } else {
                            hNu_C.fill(nu);
                        }
                    }
                    if (z < 1.0) { // Only fill Z histograms for z < 1
                        if (p_vz > -8 && p_vz < -2) {
                            hZ_D.fill(z);
                        } else {
                            hZ_C.fill(z);
                        }
                    }
                    // Q2 and Pt2 histograms remain unchanged
                    if (p_vz > -8 && p_vz < -2) {
                        hQ2_D.fill(Q2);
                        hPt2_D.fill(pt2);
                        protonCount_D++;
                    } else {
                        hQ2_C.fill(Q2);
                        hPt2_C.fill(pt2);
                        protonCount_C++;
                    }
                }
            }
        }

        // --- Compute ratio histograms ---
        H1F hRatioZ = hZ_C.histClone("hRatioZ");
        hRatioZ.divide(hZ_D);
        H1F hRatioQ2 = hQ2_C.histClone("hRatioQ2");
        hRatioQ2.divide(hQ2_D);
        H1F hRatioNu = hNu_C.histClone("hRatioNu");
        hRatioNu.divide(hNu_D);
        H1F hRatioPt2 = hPt2_C.histClone("hRatioPt2");
        hRatioPt2.divide(hPt2_D);

        // --- Convert to GraphErrors for plotting ---
        GraphErrors ratioGraphZ = hRatioZ.getGraph();
        ratioGraphZ.setTitle("Carbon/Deuterium Proton Count Ratio vs z");
        ratioGraphZ.setTitleX("Proton z");
        ratioGraphZ.setTitleY("C/D Ratio");
        ratioGraphZ.setMarkerStyle(2);
        ratioGraphZ.setMarkerSize(8);

        GraphErrors ratioGraphQ2 = hRatioQ2.getGraph();
        ratioGraphQ2.setTitle("Carbon/Deuterium Proton Count Ratio vs Q^{2}");
        ratioGraphQ2.setTitleX("Q^{2} [GeV^{2}]");
        ratioGraphQ2.setTitleY("C/D Ratio");
        ratioGraphQ2.setMarkerStyle(2);
        ratioGraphQ2.setMarkerSize(8);

        GraphErrors ratioGraphNu = hRatioNu.getGraph();
        ratioGraphNu.setTitle("Carbon/Deuterium Proton Count Ratio vs Nu");
        ratioGraphNu.setTitleX("Nu [GeV]");
        ratioGraphNu.setTitleY("C/D Ratio");
        ratioGraphNu.setMarkerStyle(2);
        ratioGraphNu.setMarkerSize(8);

        GraphErrors ratioGraphPt2 = hRatioPt2.getGraph();
        ratioGraphPt2.setTitle("Carbon/Deuterium Proton Count Ratio vs Pt^{2}");
        ratioGraphPt2.setTitleX("Pt^{2} [GeV^{2}]");
        ratioGraphPt2.setTitleY("C/D Ratio");
        ratioGraphPt2.setMarkerStyle(2);
        ratioGraphPt2.setMarkerSize(8);

        // --- Plot all ratio graphs ---
        TCanvas cZ = new TCanvas("Ratio C/D vs z", 800, 600);
        cZ.draw(ratioGraphZ, "AP");
        cZ.getPad().getAxisY().setRange(0, 2);
        cZ.getPad().getAxisX().setRange(0, 1);

        TCanvas cQ2 = new TCanvas("Ratio C/D vs Q2", 800, 600);
        cQ2.draw(ratioGraphQ2, "AP");
        cQ2.getPad().getAxisY().setRange(0, 2);

        TCanvas cNu = new TCanvas("Ratio C/D vs Nu", 800, 600);
        cNu.draw(ratioGraphNu, "AP");
        cNu.getPad().getAxisY().setRange(0, 2);
        cNu.getPad().getAxisX().setRange(2.1, 10);

        TCanvas cPt2 = new TCanvas("Ratio C/D vs Pt2", 800, 600);
        cPt2.draw(ratioGraphPt2, "AP");
        cPt2.getPad().getAxisY().setRange(0, 2);

        // --- Save canvases if desired ---
        cZ.save("/home/reh1/Pictures/Carbon/LiquidD_DIS_ProtonNumVsZ_Ratio_C_D_DISCUT.png");
        cQ2.save("/home/reh1/Pictures/Carbon/LiquidD_DIS_ProtonNumVsQ2_Ratio_C_D_DISCUT.png");
        cNu.save("/home/reh1/Pictures/Carbon/LiquidD_DIS_ProtonNumVsNu_Ratio_C_D_DISCUT.png");
        cPt2.save("/home/reh1/Pictures/Carbon/LiquidD_DIS_ProtonNumVsPt2_Ratio_C_D_DISCUT.png");

        System.out.println("Total Carbon protons: " + protonCount_C);
        System.out.println("Total Deuterium protons: " + protonCount_D);
        System.out.println("Done processing C/D ratios for z, Q2, Nu, and pt2.");
        long et = System.currentTimeMillis(); // End time for performance measurement
    }
}
